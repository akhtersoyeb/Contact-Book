import Head from "next/head"
import Image from "next/image"
import Link from "next/link"
import { useRouter } from "next/router"
import { useEffect, useState } from "react"
import { toast } from "react-toastify"
import { v4 } from "uuid"
import { addContactToLS, Contact, getContactIndexFromLS, getContactsFromLS, updateContactOnLS } from "../../lib/localStorage"
import { getDownloadURL, ref, uploadBytes } from "firebase/storage"
import { firebaseStorage } from "../../lib/firebase"


export async function getServerSideProps(context) {
  return {
    props: {
      id: context.params.id
    }
  }
}

const EditContactPage = ({ id }) => {
  const router = useRouter()

  const [contacts, setContacts] = useState<Contact[]>([])
  const [index, setIndex] = useState(-1)
  const [name, setName] = useState("")
  const [phone, setPhone] = useState("")
  const [type, setType] = useState("personal")
  const [isOnWhatsapp, setIsOnWhatsapp] = useState(false)
  const [picture, setPicture] = useState<File | null>(null)
  const [pictureUrl, setPictureUrl] = useState('')
  // const [loading, setLoading] = useState(true)

  useEffect(() => {
    const contactIndex = getContactIndexFromLS(id)
    setIndex(contactIndex)
    const storedContacts = getContactsFromLS()
    setContacts(storedContacts)

  }, [])

  useEffect(() => {
    if (index >= 0) {
      setName(contacts[index].name)
      setPhone(contacts[index].phone)
      setType(contacts[index].type)
      setIsOnWhatsapp(contacts[index].isOnWhatsapp)
      setPictureUrl(contacts[index].profilePicture)
    }

  }, [index])


  useEffect(() => {
    if (picture !== null) {
      console.log('uploading picture')
      uploadPicture()
    }
  }, [picture])




  const uploadPicture = () => {
    if (picture === null) return
    const pictureRef = ref(firebaseStorage, `images/${picture.name + v4()}`)
    uploadBytes(pictureRef, picture).then((snapshot) => {
      getDownloadURL(snapshot.ref).then((url) => {
        setPictureUrl(url)
      })
    })
  }

  const handleRemovePictureButton = () => {
    console.log()
    setPicture(null)
    setPictureUrl("")
  }


  const handleOnSave = (e: React.SyntheticEvent) => {
    e.preventDefault()

    const updatedContact: Contact = {
      id: id,
      name: name,
      phone: phone,
      type: type,
      isOnWhatsapp: isOnWhatsapp,
      profilePicture: pictureUrl
    }
    updateContactOnLS(updatedContact, index)
    toast.success('ðŸ¦„ Contact updated successfully!', {
      position: "top-center",
      autoClose: 2000,
      hideProgressBar: false,
      closeOnClick: true,
      pauseOnHover: false,
      draggable: true,
      progress: undefined,
      theme: "light",
    });
    router.push('/')

  }

  return (
    <>
      <Head>
        <title>Edit Contact</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <div className="max-w-md w-full mx-auto">
          <div className="">
            <form onSubmit={handleOnSave}>
              <div className="space-y-6 bg-white px-4 py-5 sm:p-6">
                {/* Picture */}
                <div>
                  <label className="block text-sm font-medium text-gray-700">Profile picture</label>
                  {picture || pictureUrl ? (
                    <div className="mt-1 flex flex-col justify-center items-center space-y-4 rounded-md border-2 border-dashed border-gray-300 px-6 pt-5 pb-6">
                      <Image
                        priority
                        className="w-40 h-40 rounded-full"
                        width={150}
                        height={150}
                        src={pictureUrl ? pictureUrl : URL.createObjectURL(picture)}
                        alt="Can't be rendered"
                      />
                      <button
                        className="text-rose-600"
                        onClick={handleRemovePictureButton}
                      >Remove</button>
                    </div>
                  ) : (
                    <div className="mt-1 flex justify-center rounded-md border-2 border-dashed border-gray-300 px-6 pt-5 pb-6">
                      <div className="space-y-1 text-center">
                        <svg
                          className="mx-auto h-12 w-12 text-gray-400"
                          stroke="currentColor"
                          fill="none"
                          viewBox="0 0 48 48"
                          aria-hidden="true"
                        >
                          <path
                            d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02"
                            strokeWidth={2}
                            strokeLinecap="round"
                            strokeLinejoin="round"
                          />
                        </svg>
                        <div className="flex text-sm text-gray-600">
                          <label
                            htmlFor="file-upload"
                            className="relative cursor-pointer rounded-md bg-white font-medium text-indigo-600 focus-within:outline-none focus-within:ring-2 focus-within:ring-indigo-500 focus-within:ring-offset-2 hover:text-indigo-500"
                          >
                            <span>Upload a file</span>
                            <input
                              id="file-upload"
                              name="file-upload"
                              multiple={false}
                              type="file"
                              className="sr-only"
                              accept="image/x-png,image/x-gif,image/x-jpeg"
                              onChange={(e) => {
                                if (!e.target.files) return
                                setPicture(e.target.files[0])
                              }}
                            />
                          </label>
                          <p className="pl-1">or drag and drop</p>
                        </div>
                        <p className="text-xs text-gray-500">PNG, JPG, GIF up to 10MB</p>
                      </div>
                    </div>
                  )}
                </div>

                {/* Name */}
                <div>
                  <label htmlFor="name" className="block text-sm font-medium text-gray-700">
                    Name
                  </label>
                  <input
                    value={name}
                    onChange={e => setName(e.target.value)}
                    type="text"
                    name="name"
                    id="name"
                    required
                    autoComplete="off"
                    className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                  />
                </div>

                {/* Phone Number */}
                <div>
                  <label htmlFor="phoneNumber" className="block text-sm font-medium text-gray-700">
                    Phone Number
                  </label>
                  <input
                    value={phone}
                    onChange={e => setPhone(e.target.value)}
                    type="number"
                    name="phoneNumber"
                    id="phoneNumber"
                    required
                    autoComplete="off"
                    className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                    maxLength={10}
                  />
                </div>

                {/* Contact Type */}
                <div>
                  <label htmlFor="contactType" className="block text-sm font-medium text-gray-700">
                    Contact Type
                  </label>
                  <select
                    value={type}
                    onChange={e => setType(e.target.value)}
                    id="contactType"
                    name="contactType"
                    autoComplete="off"
                    className="mt-1 block w-full rounded-md border border-gray-300 bg-white py-2 px-3 shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm"
                  >
                    <option value="personal">Personal</option>
                    <option value="office">Office</option>
                  </select>
                </div>

                {/* Whatsapp Availability */}
                <div className="flex items-start">
                  <div className="flex h-5 items-center">
                    <input
                      checked={isOnWhatsapp}
                      id="isWhatsapp"
                      name="isWhatsapp"
                      type="checkbox"
                      className="h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500"
                      onChange={e => setIsOnWhatsapp(e.target.checked)}
                    />
                  </div>
                  <div className="ml-3 text-sm">
                    <label htmlFor="isWhatsapp" className="font-medium text-gray-700">
                      Whatsapp
                    </label>
                    <p className="text-gray-500">Tick the box if this contact is available on whatsapp.</p>
                  </div>
                </div>

              </div>
              <div className="px-4 py-3 flex items-center justify-between sm:px-6">
                <Link
                  href={'/'}
                  className="inline-flex justify-center rounded-md border border-rose-500 text-rose-500 py-2 px-4 text-sm font-medium shadow-sm focus:outline-none hover:bg-rose-500 hover:text-white transition duration-200"
                >
                  Cancel
                </Link>

                <button
                  type="submit"
                  className="inline-flex justify-center rounded-md border border-transparent bg-indigo-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
                >
                  Update
                </button>
              </div>
            </form>
          </div>
        </div>

      </main>

    </>
  )
}

export default EditContactPage